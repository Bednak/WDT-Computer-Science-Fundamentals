Exercises

1.
> What is a hash table?

A hash table is a type of data structure. It stores each value with a linked key. This forms a key-value pair.  

2.
> What is hashing?

Hashing is the conversion from a key to a numerical index. The key can be any type. 

3.
> How does a hash table store data?

To store data a hash table will take a key, convert it to a hash code via a hashing function and then mods that code to an array index. It will then store
the value in the index.  


4.
> How are hash tables and objects different?

The main difference between hash tables and objects is that hash tables are a collection of data that is similar. Objects can contain completely diffrent
types of data and not need to be similar.  

5.
> Determine whether you would use a hash table or an object to store each of the following pieces of data:

- A list of pets and their unique names.

Hash Table

- The name, age, and the birthday of your best friend.

Object

- The name and location of every company in a given city.

Hash Table

- All of the books checked out from a library by a particular individual.

Hash Table

- The primary and secondary phone numbers for a contact.

Object




Programming Questions

1.

> Create a hash table that allows a sales associate to enter a customer's name, address, and phone number into the system and look up customers using their phone numbers.


function customerLookup(){
	
  let storage = [];
  let storageMax = 1000;

  this.push = function(name, number, address){
    
  let index = hash(number, storageMax);

  storage[index] = [name, number, address];
	
  };


  this.lookup = function(number){
    
    let index = hash(number, storageMax);
            
        if(storage[index] === undefined) {
          
          return "Phone number was not found"; 
      	}
        
        else if (storage[index][1] === number) {
          
          return storage[index][0] + ", " + storage[index][1] + ", " + storage[index][2]; 
               
      	}
       
  };
}

function hash(key, max){
  
	let hash = 0;
  
	for(let i = 0; i < key.length; i++){
      
		hash += key.charCodeAt(i);
	}

	return hash % max;
}

let CL = new customerLookup();

CL.push("James", "111-111-1111", '111 First Street');
CL.push("Tim", "222-222-2222", '222 Second Street');
CL.push("Kamil", "333-333-3333", '333 Third Street');
CL.push("Neal", "444-444-4444", '444 Fourth Street');


console.log(CL.lookup("111-111-1111"));
console.log(CL.lookup("444-444-4444"));
console.log(CL.lookup("666-666-6666"));
console.log(CL.lookup("333-333-3333"));


2.

> Create a hash table that allows a store owner to track their store's inventory and quantity.


function inventoryManagement(){
	
  let storage = [];
  let storageMax = 1000;

  this.push = function(product, quantity){
    
  let index = hash(product, storageMax);

  storage[index] = [product, quantity];
  
  };


  this.lookup = function(product){
    
    let index = hash(product, storageMax);
         
    if(storage[index] === undefined) {
          
      return "Product not found"; 
    }
        
    else if (storage[index][0] === product) {
          
      return "Product: " + storage[index][0] + ", Quantity: " + storage[index][1]; 
    }
     
 };
}

function hash(key, max){
  
	let hash = 0;
  
	for(let i = 0; i < key.length; i++){
      
		hash += key.charCodeAt(i);
	}

	return hash % max;
}

let IM = new inventoryManagement();

IM.push("Computer Chair", "4");
IM.push("Sectional Couch", "7");
IM.push("Leather Recliner", "10");
IM.push("Glass Table", "2");
IM.push("Computer Desk", "0");

console.log(IM.lookup("Computer Chair"));
console.log(IM.lookup("Computer Desk"));
IM.push("Computer Desk", "1");
console.log(IM.lookup("Computer Desk"));
console.log(IM.lookup("Leather Recliner"));
console.log(IM.lookup("Love seat"));


3.

> Create a hash table that allows digital copies of newspapers to be entered and searched by publisher and publication date.


function newspaperLookup(){
	
  let storage = [];
  let storageMax = 1000;

  this.push = function(paper, date){
    
  let key = paper + date;  
    
  let index = hash(key, storageMax);

  storage[index] = [paper, date];
  
};


  this.lookup = function(paper, date){
    
    let key = paper + date;
    
    let index = hash(key, storageMax);
         
    if(storage[index] === undefined) {
          
      return "Unable to locate paper"; 
    }
        
    else if (storage[index][0] === paper && storage[index][1] === date) {
          
      return "Newspaper Publisher: " + storage[index][0] + ", Date: " + storage[index][1]
    }
        
    
  };
}

function hash(key, max){
  
	let hash = 0;
  
	for(let i = 0; i < key.length; i++){
      
		hash += key.charCodeAt(i);
	}

	return hash % max;
}

let NL = new newspaperLookup();

NL.push("The New York Times", "June 1, 1999");
NL.push("Washington Post", "December 5, 1997");
NL.push("USA Today", "May 29, 2013");
NL.push("Chicago Tribune", "September 1, 2018");


console.log(NL.lookup("The New York Times", "June 1, 1999"));
console.log(NL.lookup("Chicago Tribune", "September 1, 2018"));
console.log(NL.lookup("Chicago Tribune", "September 3, 2018"));

