
Exercises
1. 

> In your own words, explain what clean code is and why it is important.

Clean code is writing code that is easy to read, decipher and maintain either by you or another coder. Coming back to code that is not clean or handing your code
to another developer can cause major issues like wasted time deciphering or having issues maintaining the code.

2. 

> Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.

An important piece of machinery that needs a strict standard of coding is a passenger jet. Modern airplanes have an immense amount of safety features that all need to coordinate 
with each other using computers and code. Having sub-par code could put these safety features in jeopardy. Any updates to these safety features would also need to rely on
clean code as the coder would need to know how every line interacts with the system. 


3. 

> Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION do(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (x-32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION


This is an example of NOT clean code. There are too many comments and the code itself is not self-explanatory, there is no indentation and the function does too much (Should be split up)

FUNCTION convertToCelsius(temp)
	SET tempCelsius to (temp-32) * (5/9)
        PRINT tempCelsius
END FUNCTION

FUNCTION convertToFahrenheit(temp)
	SET tempFahrenheit to (x * 1.8) + 32
        PRINT tempFahrenheit
END FUNCTION


4.

> Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION


This would be considered clean code as the code is self-explanatory with no need for comments, proper indentation and is DRY. 


5.

> Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION



REFACTORED: The psuedocode needs the DRY method applied to it and needs to be split up into two functions. Naming covention is good. 

FUNCTION calculateTotal(subTotal, discountRate, tax)
	SET total to subTotal * discountRate + (subTotal * tax)
	PRINT 'Your total due is:' + total
	RETURN total
END FUNCTION

FUNCTION processPayment(total, paymentType)
	IF paymentType = 'CASH' THEN
       		CALL getPayment RETURNING amount
       		PRINT "Change due: " + amount - total
   	ELSE IF paymentType = 'CREDIT CARD' THEN
       		CALL getPayment RETURNING amount
       		PRINT "Your credit card has been charged: " + total
   	END IF
END FUNCTION


b.

> The following function checks out a book if there are no issues with the guest's account.

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION



REFACTORED: IF statements too deeply nested. 

FUNCTION checkoutBook(book, guest)
	IF (guest.accountActive) AND NOT(guest.hasOverdueBooks) AND (guest.outstandingFees = 0) THEN           
        	APPEND book to guest.books AND SET book.status to "Checked Out"
        	PRINT "Your books have been issued."
 	ELSE
        	PRINT "Unable to check out book."
        END IF
END FUNCTION



c.

> The following class is a code snippet that should support the transactions a customer can perform at an ATM.

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END


REFACTORED: The class BankAccount is trying to do too much. You can create two classes instead.

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 ....
 ....
 ....

END

 
CLASS BankMarketing
 
 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END




Programming Questions

6.

>  Square Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.

Example:
[10,1,4,6,1,1,2] returns 5 because the square root of 25 is 5.
[1,1] returns 2 because 2 is not a perfect square.
The square root of 2 is approximately 1.414213562373095.


function perfectSquare(integers){
  
  let integersSum = 0;
  
  for(let i = 0; i < integers.length; i++){
   
    integersSum += integers[i];
  }
      
  let squareRoot = Math.sqrt(integersSum);
  
  if (squareRoot % 1 === 0){
    return squareRoot;
  }
  
  else{
    return integersSum;
  }
  
}

console.log(perfectSquare([10,1,4,6,1,1,2]));
console.log(perfectSquare([1,1]));


7.

Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.


function checkForDuplicates(arrayOfNumbers){
	
    var tempArray = [];
    var duplicates = false;
  
    for(let i = 0; i < arrayOfNumbers.length; i++){
      
        if(tempArray[arrayOfNumbers[i]] == undefined) {
            tempArray[arrayOfNumbers[i]] = 1;
        }

        else{
          duplicates = true;
          return duplicates;
        }
    }
    
   return duplicates;
}

console.log(checkForDuplicates([4,1,9,88,7,9,2,7,1]));
console.log(checkForDuplicates([1,8,9,99,3,5]));
