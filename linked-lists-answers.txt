Exercises

1.

> What are some pros and cons of using linked lists instead of arrays?

Pros include linked lists being independent in memory, this can allow linked lists to grow and shrink immensely. We also instantiate every node in a linked list.
This means our list never contains empty placeholders.

Cons include the inefficient way to access an element in the list, since each element must be accessed in order and can be located anywhere in memory 

2.

> Come up with a real world example of a linked list.

A GPS route would be a good example. The user starts with their location and each step tells you how to get to the next road or point eventually arriving at your destination. 


Programming Questions

1. 

> The linked list push function should take a value, create a node, and add it to the end of a list. Below is pseudocode for a push function for a singly linked list. However, there is something wrong with it. Submit both an explanation of the bug and a functional implementation of the method.

FUNCTION push(element)
CREATE node
SET node.value TO element
SET node.next TO null

IF the head node does not exist
 THEN SET head to node
ELSE
 SET current to head
 SET current.next to node
END IF
END FUNCTION


Needed a while loop to add the new element to the end of the linked list   

FUNCTION push(element)
	CREATE node
	SET node.value TO element
	SET node.next TO null

	IF the head node does not exist
 		THEN SET head to node
	ELSE
 		SET current to head
 		WHILE current.next is not null
  			SET current TO current.next 
 		ENDWHILE
 		SET current.next to node
	END IF
END FUNCTION




class Node {	
	constructor(element){ 
      
      		this.element = element; 
		    this.next = null;
	} 
} 

class LinkedList { 
	constructor(){
		this.head = null; 
		this.size = 0; 
	} 

    push(element){ 
    
      let node = new Node(element); 
      let current; 
      
      if (this.head == null){ 
          this.head = node;
      }  
      
      else { 
        
        current = this.head; 
         
        while (current.next != null) { 
            
          current = current.next; 
        } 
           
        current.next = node; 
    }
       
  } 

    displayList() {
      
      let current = this.head; 
      let message = ""; 
      
      while (current) { 
        
        message += current.element + " "; 
        current = current.next; 
      } 
      return message; 
    } 
  
} 


var collection = new LinkedList(); 

collection.push('K'); 
collection.push('A'); 
collection.push('M'); 
collection.push('I');
collection.push('L');
console.log(collection.displayList());





2.

> Given an unsorted singly linked list, remove all duplicates from the linked list.
Example
Input: a -> c -> d -> d -> a
Output: a -> c -> d



class Node {	
	constructor(element){ 
      
      		this.element = element; 
		    this.next = null;
	} 
} 

class LinkedList { 
	constructor(){
		this.head = null; 
		this.size = 0; 
	} 

    push(element){ 
    
      let node = new Node(element); 
      let current; 
      
      if (this.head == null){ 
          this.head = node;
      }  
      
      else { 
        
        current = this.head; 
         
        while (current.next != null) { 
            
          current = current.next; 
        } 
           
        current.next = node; 
    }
       
  } 

    displayList() {
      
      let current = this.head; 
      let message = ""; 
      
      while (current) { 
        
        message += current.element + " "; 
        current = current.next; 
      } 
      return message; 
    } 
  


    deleteDuplicates() {
                
        let current = this.head;
        let nextNode = this.head.next;
        let list = {};
      
        list[current.element] = true;

        while(nextNode){
        
          let element = nextNode.element;
        
          if(list[element]){
          
              current.next = nextNode.next;
              
            }
          
          else {
            
              list[element] = true;
              current = nextNode;
            }
          
          nextNode = nextNode.next;
        }
    
    }
      
}  

let collection = new LinkedList(); 

collection.push('A'); 
collection.push('C'); 
collection.push('D'); 
collection.push('D');
collection.push('A');
collection.deleteDuplicates();
console.log(collection.displayList());



3.

> Given an unsorted singly linked list, reverse it.
Example
Input: a -> b -> c -> d
Output: d -> c -> b -> a



class Node {	
	constructor(element){ 
      
      		this.element = element; 
		    this.next = null;
	} 
} 

class LinkedList { 
	constructor(){
		this.head = null; 
		this.size = 0; 
	} 

    push(element){ 
    
      let node = new Node(element); 
      let current; 
      
      if (this.head == null){ 
          this.head = node;
      }  
      
      else { 
        
        current = this.head; 
         
        while (current.next != null) { 
            
          current = current.next; 
        } 
           
        current.next = node; 
    }
       
  } 

    displayList() {
      
      let current = this.head; 
      let message = ""; 
      
      while (current) { 
        
        message += current.element + " "; 
        current = current.next; 
      } 
      return message; 
    } 
  


    reverseList() {
      
      let previous = null;
      let current = this.head;
      let next;

       while (current) {
        
       	next = current.next;
       	current.next = previous;
       	previous = current;
       	current = next;
       }

       this.head = previous;
      }  
      
}
    

let collection = new LinkedList(); 

collection.push('K'); 
collection.push('A'); 
collection.push('M'); 
collection.push('I');
collection.push('L');
collection.reverseList();
console.log(collection.displayList());
