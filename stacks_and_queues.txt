Exercises

1.

> What is the main difference between a stack and a queue?

The main difference between a stack and queue is the order the data is added and removed (FIFO AND LIFO).  
A stack would add a value to the top/back index. When removing, this latest value would be the first to be removed. 
A queue would remove the first value that entered the index. 

2. 

> What are the similarities between stacks and queues?

A stack and queue both hold an array of some type of data. The way the data can be manipulated is similar as well.

3.

> Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?

Both UNDO and REDO would be using LIFO.
For UNDO, you want the last change you made to be removed from the stack and put onto another stack (You can use .pop)
For REDO, you want to .push back what was removed onto the current stack. You can push a value that was stored on a stack for recently deleted values.

Programming Questions

1.

> Given a string, reverse it using a stack. For example, the string "Bloc!" should be converted to "!colB".

function reverseWord(word){
  
  var stack = [];
  
  for(let i = 0; i < word.length; i++){    
    stack.push(word.charAt(i));   
  }
  
  var reverse = "";
    
  for(let i = stack.length; i > 0; i--){    
    var temp = stack.pop();    
    reverse += temp;   
  }  
  return reverse;  
}

console.log(reverseWord("Bloc"));


2.

> Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.

function removeLastIn(queue){
    
  var tempStack = [];
  
  for(let i = 0; i < queue.length; i++){    
    tempStack.push(queue.charAt(i));   
  }
  
  let removedItem = tempStack.pop(queue.length);
  
  return removedItem + " was removed. " + "Updated queue is now " + tempStack;
  
}

console.log(removeLastIn("Kamil"));



1.

> Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.

class Queue {
   constructor(){
   
     this.queue =[];
   }
   
  enqueue(element){    
    
    this.queue.push(element);
  }
  
  dequeue(){
    var temp = this.queue.shift();
    return temp;
  }

}

var queue = new Queue();

queue.enqueue('K');
queue.enqueue('A');
queue.enqueue('M');
queue.enqueue('I');
queue.enqueue('L');
console.log(queue);
console.log(queue.dequeue());
console.log(queue.dequeue());
console.log(queue);







