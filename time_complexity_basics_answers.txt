Exercises

1.

> What is time complexity and what is its relation to algorithms?

Time complexity is usually expressed as function that estimates the time it takes to run a program. In relation to algorithms, it is used to check how efficient the algorithm is in determining the solution. 

2.

> What is runtime?

Refers to the physical duration of an algorithm. 

3.

> How is the runtime of an algorithm calculated?

The runtime of an algorithm would be calculated by the amount of instructions the algorithm will execute for the size of its input.
Once that is complete, it will simplify the expression and drop any constants. 


4.

> Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.

MOST EFFICIENT
1. O(1)
2. O(log n)
3. O(n)
4. O(n log n)
5. O(n^2)
6. O(2^n)
7. O(n!) <---FACTORIAL TIME
LEAST EFFICIENT


5.

> Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

Exponential Growth Rate

An example of this could a flu epidemic in a heavily populated city. The flu spreads can spread easily to one person who can expose multiple people who then
expose more people. This growth is exponenetial and grows fast.  


6.

> Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION


O(n) Linear growth would be the time complexity (has single FOR loop)


7.

> Determine the time complexity of the following snippet of code.

FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION


O(n^2) Quadratic growth rate would be the time complexity.


8.

> Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

O(2^n) Exponential growth rate would be the time complexity.


9.

> Out of the code snippets you just saw, which is the most time efficient?

Referring back to question 4, the most efficient code snippet would be one that uses Linear growth.

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION


